

* Pulir: parentThread.join(srcList.length * 5000); // pulir, el 5000 se puede obtener de la configuración

* Hacer la carga de scripts con src (revisar los TreeViewParsed.getScriptList())

* Ver si el script de carga cargado via src funciona (es opcional)

* revisar peliculas ciclo de cine

* Hacer carga síncrona de scripts en el caso de carga de página no ItsNat

* Hacer carga asíncrona de scripts en el caso de inserción de Fragment

* No enviar el sendLoadEvent si no están activados los eventos, quizás se necesita un param más, valdría también para Web
  Idem sendUnloadEvent


* Hacer getItsNatDocImpl().sendLoadEvent(); (constructor de PageImpl) cuando sepamos que hemos cargado t_odos los archivos dependendientes en tiempo de carga


* Probar MD5

* Probrar lollipop

* Pensar si en inflar en local otros tipos de XML de resources

* Hacer un custom View <a> y quizás un custom View <form>, el objetivo es hacer un navegador de layouts nativos
como páginas.

    Utilizar el <a> por ejemplo en el ejemplo de control remoto

* Revisar que estamos procesando todos los atributos:

    http://developer.android.com/reference/android/R.styleable.html

* Testear en un layout aparte KeyboardView

    http://developer.android.com/reference/android/inputmethodservice/Keyboard.html
    http://developer.android.com/reference/android/inputmethodservice/KeyboardView.html
    http://www.fampennings.nl/maarten/android/09keyboard/index.htm
    http://alvinalexander.com/java/jwarehouse/android/core/java/android/inputmethodservice/KeyboardView.java.shtml

* Pensar en una extensión de los layouts en donde se puedan poner % y el cálculo se hace a partir del width/height suministrado
en tiempo de parseo del View padre en el que será finalmente insertado (el DecorView por ejemplo).

* Ver como conseguir que un ListView obtenga sus entries y el layout de cada item desde el servidor



* Pensar como modelar los drawable por ejemplo para definir bordes, cargar imágenes etc desde el servidor

* Probar re-arranque de actividad (volver a restaurar bien el setting)

* Pensar en eventos que puedan enviarse al servidor tipo GPS, giróscopo etc por ponerlo fácil aunque se puede hacer con UserEvents

* Hacer un map de eventos para hacer el binding de los ViewAdapter en vez de ifs

* Añadir más datos a enviar de MouseEvent y KeyEvent, en teoría debería ser configurable

* Probar el KeyEvent con un ejemplo de verdad http://www.mysamplecode.com/2012/06/android-edittext-enterkey-event-example.html


* Añadir licencia Apache a ItsNat Droid, archivo global y manifiesto en cada archivo

* Implementar con infinita paciencia los más atributos posibles:

  http://developer.android.com/reference/android/R.styleable.html

* Drag and drop events (hay métodos nativos para drag & drop)

* A largo plazo substituir los casos de valor por defecto null (no imponer valor por defecto en el removeAttribute) por valores
concretos pues ya sabemos acceder a los mismos, por ejemplo, sabemos hacer: mTextOff = a.getText(com.android.internal.R.styleable.Switch_textOff);

* Hacer que funcione de forma síncrona la carga del archivo asociado en <script src="..."> en el caso de página no servida por ItsNat
 (ejemplo ItsNatDroidServletNoItsNat)

    Revisar código en InflatedLayoutPageImpl.parseScriptElement, se trataría de pre-parsear en el caso de página no servida por ItsNat
    en el hilo de request de la página los <script src="..."> y cargar los archivos en el orden de declaración y hasta que
    no se han cargado no terminar la request de la página.

